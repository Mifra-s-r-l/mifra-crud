<?php

namespace App\Models\MifraCruds;

use App\Models\MifraCruds\MifracrudsRolesModel;
use Illuminate\Support\Facades\DB;
use Spatie\Permission\Models\Permission as SpatiePermission;

class MifracrudsPermissionsModel extends SpatiePermission
{

    protected $fillable = [
        'name',
        'guard_name',
        'crud_name',
        'crud_desc',
    ];

    protected $appends = [
        'title',
        'crud_name',
        'crud_desc',
    ];

    // Aggiungi qui eventuali relazioni, accessori, mutatori o metodi personalizzati

    public function getTitleAttribute()
    {
        $database = config('mifracrud.database');
        $parts = explode('_', $this->name);
        return ucfirst($parts[0]);
    }

    public function getCrudNameAttribute()
    {
        $database = config('mifracrud.database');
        $parts = explode('_', $this->name);
        $searchPattern = str_replace('_', '.', implode('_', array_slice($parts, 1)));
        $crud = DB::connection('mongodb')->collection($database['collection'])->where('route_name', $searchPattern)->first();
        if (!$crud) {
            $crud = DB::connection('mongodb')->collection($database['group'])->where('route_name', $searchPattern)->first();
        }
        return isset($crud['title']) ? $crud['title'] : "";
    }

    public function getCrudDescAttribute()
    {
        $database = config('mifracrud.database');
        $parts = explode('_', $this->name);
        $searchPattern = str_replace('_', '.', implode('_', array_slice($parts, 1)));
        $crud = DB::connection('mongodb')->collection($database['collection'])->where('route_name', $searchPattern)->first();
        if (!$crud) {
            $crud = DB::connection('mongodb')->collection($database['group'])->where('route_name', $searchPattern)->first();
        }
        return isset($crud['desc']) ? $crud['desc'] : "";
    }

    public function roles_crud()
    {
        return $this->belongsToMany(MifracrudsRolesModel::class, 'role_has_permissions', 'permission_id', 'role_id');
    }

    public function delete()
    {
        // Rimuovi il permesso da tutti i ruoli
        $this->roles()->detach();
        // Chiamata al metodo delete del genitore per eliminare il permesso
        return parent::delete();
    }
}