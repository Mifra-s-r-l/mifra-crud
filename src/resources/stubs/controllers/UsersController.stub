<?php

namespace App\Http\Controllers\MifraCruds;

use App\Http\Requests\MifraCruds\MifracrudsUsersRequest;
use App\Models\MifraCruds\MifracrudsPermissionsModel;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Mifra\Crud\Helpers\CrudHelpers;
use Spatie\Permission\Models\Role;

class MifracrudsUsersController extends Controller
{
    public function index()
    {
        $user = auth()->user();

        $database = config('mifracrud.database');

        $menu = DB::connection('mongodb')->collection($database['collection'])->where('route_name', 'mifracruds.users')->first();

        $items = User::with('roles')->where('id', '!=', $user->id)->get();

        $pathPermission = CrudHelpers::conversionRouteName($items[0]['route_name'], 'permission');
        $permissions = MifracrudsPermissionsModel::where('name', 'LIKE', '%' . $pathPermission)->get();
        $permissionNames = $permissions->pluck('name')->toArray();

        $contents = [
            "title" => $menu['title'],
            "route_name" => $menu['route_name'],
            "permissions" => $permissionNames,
            "super-admin" => $user->hasAnyRole('super-admin'),
            "controller_name" => 'App\\Http\\Controllers\\MifraCruds\\MifracrudsUsersController',
            'export_print' => true,
            'init_sort' => [0 => ['column' => 'name', 'dir' => 'asc']],
            'filters_top_bar_tabulator' => [
                "list" => [
                    "name" => "Nome",
                    "email" => "Email",
                ]
                ,
                "reset" => "name",
            ],
        ];

        return view('mifracruds.users.index')
            ->with('contents', $contents)
            ->with('items', collect($items));
    }

    public function edit(Request $request)
    {
        $id = $request->id;
        $modalID = $request->modal_id;
        $routeName = $request->route_name;

        // Restituisce la vista con le variabili passate dinamicamente
        return view('pages.mifracruds.users.modal.element', compact('id', 'modalID', 'routeName'));
    }

    public function update(Request $request, $id)
    {
        $authUser = auth()->user();
        $user = User::findOrFail($id);
        $user->name = $request->name;
        $user->email = $request->email;
        $user->updateActions('updated');
        if ($request->password) {
            $user->password = Hash::make($request->password);
        }
        $user->save();

        $rolesIds = $request->input('roles', []);
        $roles = Role::find($rolesIds); // Trova i ruoli basandoti sugli ID
        if ($roles) {
            $user->syncRoles($roles); // Assegna i ruoli all'utente
        }
    }

    public function create(MifracrudsUsersRequest $request)
    {
        $authUser = auth()->user();
        $user = new User;
        $user->name = $request->name;
        $user->email = $request->email;
        $user->password = Hash::make($request->password);
        $user->updateActions('created');
        $user->save();

        $rolesIds = $request->input('roles', []);
        $roles = Role::find($rolesIds); // Trova i ruoli basandoti sugli ID
        if ($roles) {
            $user->syncRoles($roles); // Assegna i ruoli all'utente
        }
    }

    public function delete(Request $request, $id)
    {
        if ($id == "all") {
            foreach ($request->lists as $elem) {
                $item = User::where('id', $elem['id'])->withTrashed()->first();
                if ($request->hard_delete == "1") {
                    $item->forceDelete();
                } else {
                    $item->updateActions('deleted');
                    $item->delete();
                }
            }
        } else {
            $item = User::where('id', $id)->withTrashed()->first();
            if ($request->hard_delete == "1") {
                $item->forceDelete();
            } else {
                $item->updateActions('deleted');
                $item->delete();
            }
        }

        if ($request->hard_delete == "1") {
            $items = User::onlyTrashed()->with('roles')->get();
        } else {
            $user = auth()->user();
            $items = User::with('roles')->where('id', '!=', $user->id)->get();
        }
        return response()->json($items);
    }

    public function restore(Request $request, $id)
    {
        if ($id == "all") {
            foreach ($request->lists as $elem) {
                $item = User::where('id', $elem['id'])->withTrashed()->first();
                $item->deleted_at = null;
                $item->save();
            }
        } else {
            $item = User::where('id', $id)->withTrashed()->first();
            $item->deleted_at = null;
            $item->save();
        }
        
        $items = User::onlyTrashed()->with('roles')->get();
        return response()->json($items);
    }

    public function getData()
    {
        $user = auth()->user();
        $items = User::with('roles')->where('id', '!=', $user->id)->get();
        return response()->json($items);
    }

    public function getTrashed()
    {
        $items = User::onlyTrashed()->with('roles')->get();
        return response()->json($items);
    }

    public function getUserInfoByID(Request $request)
    {
        // Recupera l'ID utente dalla request
        $userId = $request->input('id');
        // Trova l'utente corrispondente nell database
        $user = User::find($userId);

        if (!$user) {
            return response()->json(['message' => 'Utente non trovato'], 404);
        }

        // Restituisci le informazioni dell'utente
        return response()->json($user);
    }

}
