<?php

namespace App\Http\Controllers\MifraCruds;

use App\Helpers\MifraCruds\MifracrudsHelper;
use App\Models\MifraCruds\MifracrudsPermissionsModel;
use App\Models\MifraCruds\MifracrudsRolesModel;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\DB;
use Mifra\Crud\Helpers\CrudHelpers;

class MifracrudsRolesController extends Controller
{
    use MifracrudsHelper;

    public function index()
    {
        $database = config('mifracrud.database');

        $menu = DB::connection('mongodb')->collection($database['collection'])->where('route_name', 'mifracruds.roles')->first();

        $items = MifracrudsRolesModel::with('permissions_crud')->get();

        $pathPermission = CrudHelpers::conversionRouteName($items[0]['route_name'], 'permission');
        $permissions = MifracrudsPermissionsModel::where('name', 'LIKE', '%' . $pathPermission)->get();
        $permissionNames = $permissions->pluck('name')->toArray();

        $contents = [
            "title" => $menu['title'],
            "route_name" => $menu['route_name'],
            "permissions" => $permissionNames,
            "controller_name" => 'App\\Http\\Controllers\\MifraCruds\\MifracrudsRolesController',
            'init_sort' => [0 => ['column' => 'name', 'dir' => 'asc']],
            'filters_top_bar_tabulator' => [
                "list" => [
                    "name" => "Nome",
                ]
                ,
                "reset" => "name",
            ],
        ];

        return view('mifracruds.roles.index')
            ->with('contents', $contents)
            ->with('items', collect($items));
    }

    public function edit(Request $request)
    {
        $id = $request->id;
        $modalID = $request->modal_id;
        $routeName = $request->route_name;

        // Restituisce la vista con le variabili passate dinamicamente
        return view('pages.mifracruds.roles.modal.element', compact('id', 'modalID', 'routeName'));
    }

    public function update(Request $request, $id)
    {
        $role = MifracrudsRolesModel::where("id", $id)->first();
        $role->name = $this->manipulateStringRoleName($request->input('name'));
        $role->update();

        // Estrai l'array di ID dei permessi dal tuo request
        $permissionsIds = request()->input('permissions');

        // Recupera le istanze dei permessi usando gli ID
        $permissions = MifracrudsPermissionsModel::whereIn('id', $permissionsIds)->get();

        // Sincronizza i permessi per il ruolo utilizzando le istanze dei permessi
        $role->syncPermissions($permissions);

        $items = MifracrudsRolesModel::with('permissions_crud')->get();
        return response()->json($items);
    }

    public function create(Request $request)
    {
        // Creare un nuovo ruolo con il nome fornito nella richiesta
        $role = new MifracrudsRolesModel();
        $role->name = $this->manipulateStringRoleName($request->input('name'));
        $role->guard_name = 'web'; // Assicurati di impostare la guardia corretta se necessario
        $role->save();

        // Verifica se ci sono permessi da assegnare
        $permissionsIds = $request->input('permissions', []);

        if (!empty($permissionsIds)) {
            // Recupera le istanze dei permessi usando gli ID
            $permissions = MifracrudsPermissionsModel::whereIn('id', $permissionsIds)->get();

            // Assegna i permessi al ruolo appena creato
            $role->givePermissionTo($permissions);
        }

        $items = MifracrudsRolesModel::with('permissions_crud')->get();
        return response()->json($items);
    }

    public function delete(Request $request, $id)
    {
        if ($id == "all") {
            foreach ($request->lists as $elem) {
                $role = MifracrudsRolesModel::findById($elem['id']);

                // Controlla se il ruolo esiste
                if ($role) {
                    // Opzione 1: Rimuovi il ruolo da tutti gli utenti a cui è stato assegnato
                    $role->users()->detach();

                    // Opzione 2: Gestisci gli utenti assegnati in modo specifico
                    // (es. assegnali a un ruolo differente prima di eliminare il ruolo corrente)

                    // Dopo aver gestito gli utenti assegnati, elimina il ruolo
                    $role->delete();
                }
            }

        } else {
            $role = MifracrudsRolesModel::findById($id);

            // Controlla se il ruolo esiste
            if ($role) {
                // Opzione 1: Rimuovi il ruolo da tutti gli utenti a cui è stato assegnato
                $role->users()->detach();

                // Opzione 2: Gestisci gli utenti assegnati in modo specifico
                // (es. assegnali a un ruolo differente prima di eliminare il ruolo corrente)

                // Dopo aver gestito gli utenti assegnati, elimina il ruolo
                $role->delete();
            } else {
                return response()->json(['message' => 'Ruolo non eliminato qualcosa è andato storto', 'id' => $id]);
            }
        }

        $items = MifracrudsRolesModel::with('permissions_crud')->get();
        return response()->json($items);
    }
}