<?php

namespace App\Http\Controllers\MifraCruds;

use App\Models\MifraCruds\MifracrudsPermissionsModel;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\DB;
use Mifra\Crud\Helpers\CrudHelpers;
use Spatie\Permission\Models\Permission;
use Spatie\Permission\Models\Role;

class MifracrudsPermissionsController extends Controller
{
    public function index()
    {
        $database = config('mifracrud.database');

        $menu = DB::connection('mongodb')->collection($database['collection'])->where('route_name', 'mifracruds.permissions')->first();

        $items = MifracrudsPermissionsModel::get();

        $pathPermission = CrudHelpers::conversionRouteName($menu['route_name'], 'permission');
        $permissions = MifracrudsPermissionsModel::where('name', 'LIKE', '%' . $pathPermission)->get();
        $permissionNames = $permissions->pluck('name')->toArray();

        $contents = [
            "title" => $menu['title'],
            "route_name" => $menu['route_name'],
            "permissions" => $permissionNames,
            "controller_name" => 'App\\Http\\Controllers\\MifraCruds\\MifracrudsPermissionsController',
            'init_sort' => [0 => ['column' => 'crud_name', 'dir' => 'asc']],
            'filters_top_bar_tabulator' => [
                "list" => [
                    "name" => "Nome",
                ]
                ,
                "reset" => "name",
            ],
        ];

        return view('mifracruds.permissions.index')
            ->with('contents', $contents)
            ->with('items', collect($items));
    }

    public function edit(Request $request)
    {
        $id = $request->id;
        $modalID = $request->modal_id;
        $routeName = $request->route_name;

        // Restituisce la vista con le variabili passate dinamicamente
        return view('pages.mifracruds.permissions.modal.element', compact('id', 'modalID', 'routeName'));
    }

    public function update(Request $request, $id)
    {

    }

    public function create(Request $request)
    {
        // recupero il crud su mongo tramite il route_name
        $database = config('mifracrud.database');
        $menu = DB::connection('mongodb')->collection($database['collection'])->where('route_name', $request->crud)->first();

        // ripulisco la $request->name eliminando spazi e caratteri che nn siano lettere
        $request->name = preg_replace('/[^a-zA-Z]/', '', $request->name);

        // aggiorno il campo permissions di menu aggiungendo un elemento all'array
        $menu['permissions'][] = $request->name;
        DB::connection('mongodb')->collection($database['collection'])->where('route_name', $request->crud)->update($menu);

        // Converto name tutto minuscolo
        $name = strtolower($request->name);

        // Lo unisco a crud
        $permission = $name . "_" . str_replace(".", "_", $request->crud);

        // Creo il permesso
        Permission::firstOrCreate(['name' => $permission]);

        // Assegno il nuovo permesso al ruolo super-admin
        $role = Role::where('name', 'super-admin')->first();
        $role->givePermissionTo($permission);

        $items = MifracrudsPermissionsModel::get();
        return response()->json($items);
    }

    public function delete(Request $request, $id)
    {
        if ($id == "all") {
            foreach ($request->lists as $elem) {
                $permission = MifracrudsPermissionsModel::findById($elem['id']);
                // faccio l'explode di $permission->name per il primo elemento
                $parts = explode('_', $permission->name);
                // creo una stringa con tutti gli elementi tranne il primo
                $searchPattern = str_replace('_', '.', implode('_', array_slice($parts, 1)));
                // recupero il crud su mongo tramite il route_name
                $database = config('mifracrud.database');
                $menu = DB::connection('mongodb')->collection($database['collection'])->where('route_name', $searchPattern)->first();
                // elimino l'elemento da menu uguale a $parts[0]
                $menu['permissions'] = array_diff($menu['permissions'], [$parts[0]]);
                // aggiorno il menu
                DB::connection('mongodb')->collection($database['collection'])->where('route_name', $searchPattern)->update($menu);
                $permission->delete();
            }
        }

        $items = MifracrudsPermissionsModel::get();
        return response()->json($items);
    }
}
