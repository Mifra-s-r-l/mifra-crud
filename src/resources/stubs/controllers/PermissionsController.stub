<?php

namespace App\Http\Controllers\MifraCruds;

use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\DB;
use Mifra\Crud\Helpers\CrudHelpers;
use App\Models\MifraCruds\MifracrudsPermissionsModel;

class MifracrudsPermissionsController extends Controller
{
    public function index()
    {
        $database = config('mifracrud.database');

        $menu = DB::connection('mongodb')->collection($database['collection'])->where('route_name','mifracruds.permissions')->first();

        $items = MifracrudsPermissionsModel::get();

        $pathPermission = CrudHelpers::conversionRouteName($items[0]['route_name'], 'permission');
        $permissions = MifracrudsPermissionsModel::where('name', 'LIKE', '%'.$pathPermission)->get();
        $permissionNames = $permissions->pluck('name')->toArray();
        
        $contents = [
            "title" => $menu['title'],
            "route_name" => $menu['route_name'],
            "permissions" => $permissionNames,
            "controller_name" => 'App\\Http\\Controllers\\MifraCruds\\MifracrudsPermissionsController',
            'init_sort' => [0 => ['column' => 'crud_name', 'dir' => 'asc']],
            'filters_top_bar_tabulator' => [
                "list" => [
                    "name" => "Nome",
                    ]
                ,
                "reset" => "name"
            ],
        ];

        return view('mifracruds.permissions.index')
            ->with('contents', $contents)
            ->with('items', collect($items));
    }

    public function edit(Request $request)
    {
        $id = $request->id;
        $modalID = $request->modal_id;
        $routeName = $request->route_name;

        // Restituisce la vista con le variabili passate dinamicamente
        return view('pages.mifracruds.permissions.modal.element', compact('id', 'modalID', 'routeName'));
    }

    public function update(Request $request, $id)
    {
        
    }

    public function create(Request $request)
    {
        
    }

    public function delete(Request $request, $id)
    {
        
    }
}
