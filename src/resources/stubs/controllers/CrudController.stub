<?php

namespace App\Http\Controllers\MifraCruds;

use App\Models\MifraCruds\MifracrudsPermissionsModel;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\DB;
use Mifra\Crud\Helpers\CrudHelpers;

class MifracrudsCrudsController extends Controller
{
    public function createList(): array
    {
        $user = auth()->user();
        $database = config('mifracrud.database');

        $groups = $this->fetchGroups();
        $menus = $this->initializeMenus($groups);
        $groupIndices = $this->getGroupIndices($groups);

        $cruds = $this->fetchCruds($database['collection']);
        $menus = $this->populateMenusWithCruds($menus, $groupIndices, $cruds);

        return ['menus' => $menus, 'items' => $cruds, 'user' => $user];
    }

    private function fetchGroups()
    {
        return DB::connection('mongodb')->collection('cruds_groups')->orderBy('order', 'asc')->get();
    }

    private function initializeMenus($groups)
    {
        $menus = [];
        foreach ($groups as $group) {
            $groupIndex = count($menus);
            $menus[$groupIndex] = [
                '_id' => $group['_id'],
                'id' => $group['id'],
                'icon' => $group['icon'],
                'title' => $group['title'],
                'desc' => $group['desc'] ?? null,
                'route_name' => $group['group'],
                'group' => 'Group',
                'order' => $group['order'],
                '_children' => [],
            ];
        }
        return $menus;
    }

    private function getGroupIndices($groups)
    {
        $groupIndices = [];
        foreach ($groups as $group) {
            $groupKey = $group['group'];
            $groupIndex = count($groupIndices);
            $groupIndices[$groupKey] = $groupIndex;
        }
        return $groupIndices;
    }

    private function fetchCruds($collection)
    {
        return DB::connection('mongodb')->collection($collection)->where('parent_id', 0)->orderBy('order', 'asc')->get();
    }

    private function populateMenusWithCruds($menus, $groupIndices, $cruds)
    {
        foreach ($cruds as $item) {
            $groupKey = $item['group'];
            if (isset($groupIndices[$groupKey])) {
                $groupIndex = $groupIndices[$groupKey];
                $menus[$groupIndex]['_children'][] = [
                    '_id' => $item['_id'],
                    'id' => $item['id'],
                    'icon' => $item['icon'],
                    'title' => $item['title'],
                    'desc' => $item['desc'],
                    'route_name' => $item['route_name'],
                    'group' => $menus[$groupIndex]['title'],
                    'order' => $item['order'],
                ];

                $cruds_childs = DB::connection('mongodb')->collection('cruds')->where('parent_id', intval($item['id']))->orderBy('order', 'asc')->get();
                foreach ($cruds_childs as $cruds_child) {
                    $menus[$groupIndex]['_children'][array_key_last($menus[$groupIndex]['_children'])]['_children'][] = [
                        '_id' => $cruds_child['_id'],
                        'id' => $cruds_child['id'],
                        'icon' => $cruds_child['icon'],
                        'title' => $cruds_child['title'],
                        'desc' => $cruds_child['desc'],
                        'route_name' => $cruds_child['route_name'],
                        'group' => $menus[$groupIndex]['title'],
                        'order' => $cruds_child['order'],
                    ];
                }
            }
        }
        return $menus;
    }

    public function index()
    {
        $cruds = $this->createList();
        $user = $cruds['user'];
        $items = $cruds['items'];
        $itemsWithGroupNames = $cruds['menus'];

        $pathPermission = CrudHelpers::conversionRouteName($items[0]['route_name'], 'permission');
        $permissions = MifracrudsPermissionsModel::where('name', 'LIKE', '%' . $pathPermission)->get();
        $permissionNames = $permissions->pluck('name')->toArray();

        $contents = [
            "title" => $items[0]['title'], // titolo della pagina
            "route_name" => $items[0]['route_name'], // rotta per da utilizzare su tabulator per edit, create, update e delete
            "permissions" => $permissionNames, // lista di tutti i permessi del CRUD
            "super-admin" => $user->hasAnyRole('super-admin'), // controllo se l'utente loggato è super-admin
            "controller_name" => 'App\\Http\\Controllers\\MifraCruds\\MifracrudsCrudsController', // fare riferimento a ThemeController::tabulator_delete
            'export_print' => true, // per visualizzare stampa e export
            'init_sort' => [0 => ['column' => 'order', 'dir' => 'asc']], // ordinamento iniziale di tabulator
            'filters_top_bar_tabulator' => [], // filtri della pagina top-bar di tabulator se pieno compare
        ];

        //TODO possiamo inserire i parametri sopra direttamente nel database mongo
        //TODO sistemare la dicitura dei valori dell'array sopra

        return view('mifracruds.cruds.index')
            ->with('contents', $contents)
            ->with('items', collect($itemsWithGroupNames));
    }

    public function edit(Request $request)
    {
        $id = $request->id;
        $modalID = $request->modal_id;
        $routeName = $request->route_name;

        // Restituisce la vista con le variabili passate dinamicamente
        return view('pages.mifracruds.cruds.modal.element', compact('id', 'modalID', 'routeName'));
    }

    public function editGroup(Request $request)
    {
        $id = $request->id;
        $modalID = $request->modal_id;
        $routeName = $request->route_name;

        // Restituisce la vista con le variabili passate dinamicamente
        return view('pages.mifracruds.cruds.modal.element_parent', compact('id', 'modalID', 'routeName'));
    }

    public function update(Request $request)
    {
        dd($request);
    }

    public function updateGroup(Request $request)
    {
        dd($request);
    }

    public function create(Request $request)
    {
        $database = config('mifracrud.database');
        $items = DB::connection('mongodb')->collection($database['collection'])->count();
        $lastItem = DB::connection('mongodb')
            ->collection($database['collection'])
            ->orderBy('order', 'desc') // Ordina in modo discendente
            ->first();

        $elements = [];

        // Definizione dell'array di base per gli elementi del menu
        $elements = [
            'id' => intval($items + 1),
            'parent_id' => $request->type == "1" ? intval($request->parent_id) : 0,
            'title' => $request->title,
            'icon' => $request->icon,
            'desc' => $request->desc,
            'route_name' => 'mifracruds.' . $request->route_name,
            'group' => $request->group,
            'order' => intval($lastItem['order'] + 1),
        ];

        // Se non è specificato un gruppo, impostiamo i valori per un divisore
        if ($request->type == "2") {
            $elements['parent_id'] = 0;
            $elements['title'] = 'Divisore';
            $elements['icon'] = null;
            $elements['desc'] = null;
            $elements['route_name'] = 'submenu';
            $elements['group'] = null;
        }

        // Se non è specificato un nome di percorso, impostiamo il route_name su stringa vuota
        if ($request->type == "1") {
            $elements['route_name'] = 'submenu';
        }

        //TODO sistemare la forzatura della route_name tutta minuscola

        Artisan::call('mifra:createcrud', [
            'elements' => json_encode($elements), // Passa gli elementi come stringa JSON
            '--delete' => false, // Se vuoi utilizzare l'opzione delete, cambia in true
        ]);

        $cruds = $this->createList();
        $items = $cruds['menus'];
        return response()->json($items);
    }

    public function createGroup(Request $request)
    {
        $database = config('mifracrud.database');
        $items = DB::connection('mongodb')->collection($database['group'])->count();
        $lastItem = DB::connection('mongodb')
            ->collection($database['group'])
            ->orderBy('order', 'desc') // Ordina in modo discendente
            ->first();
        $elements = [
            'id' => intval($items + 1),
            'title' => $request->title,
            'icon' => $request->icon,
            'group' => $request->group,
            'order' => intval($lastItem['order'] + 1),
        ];

        Artisan::call('mifra:creategroupcrud', [
            'elements' => json_encode($elements), // Passa gli elementi come stringa JSON
            '--delete' => false, // Se vuoi utilizzare l'opzione delete, cambia in true
        ]);

        $cruds = $this->createList();
        $items = $cruds['menus'];
        return response()->json($items);
    }

    public function delete(Request $request, $id)
    {
        //dd($request);
        if ($id == "all") {
            foreach ($request->lists as $elem) {
                if (isset($elem['_children'])) {
                    $this->deleteGroupANDChildren($elem);
                } else {
                    $this->deleteCruds($elem['route_name'], $elem['id']);
                }
            }
        } else {
            if (isset($request->data['_children'])) {
                $this->deleteGroupANDChildren($request->data);
            } else {
                $this->deleteCruds($request->data['route_name'], $id);
            }
        }

        $cruds = $this->createList();
        $items = $cruds['menus'];
        return response()->json($items);
    }

    public function deleteCruds($route_name, $id)
    {
        $elements = [
            'id' => intval($id),
            'route_name' => $route_name,
        ];
        Artisan::call('mifra:createcrud', [
            'elements' => json_encode($elements), // Passa gli elementi come stringa JSON
            '--delete' => true, // Se vuoi utilizzare l'opzione delete, cambia in true
        ]);
    }

    public function deleteGroupANDChildren($data)
    {
        foreach ($data['_children'] as $elem) {
            $this->deleteCruds($elem['route_name'], $elem['id']);
        }
        $elements = [
            'id' => intval($data['id']),
        ];

        Artisan::call('mifra:creategroupcrud', [
            'elements' => json_encode($elements), // Passa gli elementi come stringa JSON
            '--delete' => true, // Se vuoi utilizzare l'opzione delete, cambia in true
        ]);
    }
}
