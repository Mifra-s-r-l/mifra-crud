<?php

namespace App\Http\Controllers\MifraCruds;

use Illuminate\Http\Request;
use Illuminate\Routing\Controller;
use Illuminate\Support\Facades\DB;
use Mifra\Crud\Helpers\CrudHelpers;
use Illuminate\Support\Facades\Artisan;

class {{crud_name}}Controller extends Controller
{
    public function index()
    {
        $database = config('mifracrud.database');

        // Recupera tutti gli elementi dalla collezione di partenza
        $items = DB::connection('mongodb')->collection($database['collection'])->get();

        // Preparare un array per contenere gli elementi arricchiti con i nomi dei gruppi
        $itemsWithGroupNames = [];

        // Cicla sugli elementi per recuperare i nomi dei gruppi dalla seconda collezione
        foreach ($items as $item) {
            // Assicurati che l'elemento abbia un campo 'group'
            if (isset($item['group'])) {
                // Recupera il gruppo corrispondente dall'altra collezione
                $group = DB::connection('mongodb')->collection($database['group'])->where('group', $item['group'])->first();

                // Aggiungi il nome del gruppo all'elemento, se il gruppo esiste
                if ($group) {
                    $item['groupName'] = $group['title']; // Assumendo che il gruppo abbia un campo 'name'
                } else {
                    // Gestisci il caso in cui il gruppo non viene trovato
                    $item['groupName'] = 'Gruppo non trovato';
                }
            } else {
                // Gestisci il caso in cui l'elemento non abbia un campo 'group'
                $item['groupName'] = 'Nessun gruppo';
            }

            // Aggiungi l'elemento arricchito all'array di risultati
            $itemsWithGroupNames[] = $item;
        }

        $path = CrudHelpers::conversionRouteName($items[0]['route_name'], 'path');
        $name = str_replace("mifracruds/", "", $path);

        $contents = [
            "title" => $items[0]['title'], // titolo della pagina
            "element" => 'pages.mifracruds.'.$name.'.modal.element', // path del modal per la modifica
            "controller_name" => 'App\\Http\\Controllers\\MifraCruds\\MifracrudsCrudsController', // fare riferimento a ThemeController::tabulator_delete
            'export_print' => true, // per visualizzare stampa e export
            'init_sort' => [ 0 => ['column' => 'title', 'dir' => 'asc' ] ], // ordinamento iniziale di tabulator
            'filters_top_bar_tabulator' => [] // filtri della pagina top-bar di tabulator se pieno compare
        ];

        //TODO possiamo inserire i parametri sopra direttamente nel database mongo
        //TODO sistemare la dicitura dei valori dell'array sopra

        return view('{{route_name}}.index')
            ->with('contents', $contents)
            ->with('items', collect($itemsWithGroupNames));
    }

    public function create(Request $request)
    {
        $database = config('mifracrud.database');
        $items = DB::connection('mongodb')->collection($database['collection'])->count();
        $elements =[
            'id' => intval($items+1),
            'title' => $request->title,
            'icon' => $request->icon,
            'desc' => $request->desc,
            'route_name' => 'mifracruds.'.$request->route_name,
            'group' => $request->group,
        ];

        //TODO sistemare la forzatura della route_name tutta minuscola

        Artisan::call('mifra:createcrud', [
            'elements' => json_encode($elements), // Passa gli elementi come stringa JSON
            '--delete' => false, // Se vuoi utilizzare l'opzione delete, cambia in true
        ]);

        if ($request->ajax()) {
            return response()->json([
                'status' => 'success',
                'title' => 'Successo',
                'message' => 'Elemento creato con successo'
            ]);
        } else {
            return redirect('/')->with('message', 'Elemento creato con successo');
        }
    }
    
    public function delete(Request $request, $id)
    {
        $elements =[
            'id' => intval($id),
            'route_name' => $request->data['route_name'],
        ];

        Artisan::call('mifra:createcrud', [
            'elements' => json_encode($elements), // Passa gli elementi come stringa JSON
            '--delete' => true, // Se vuoi utilizzare l'opzione delete, cambia in true
        ]);

        if ($request->ajax()) {
            return response()->json([
                'status' => 'success',
                'title' => 'Successo',
                'message' => 'Elemento eliminato con successo'
            ]);
        } else {
            return redirect('/')->with('message', 'Elemento eliminato con successo');
        }
    }

    public function createGroup(Request $request, $id)
    {
        $elements =[
            'id' => intval($id),
            'title' => $request->title,
            'icon' => $request->icon,
            'group' => $request->group,
        ];

        Artisan::call('mifra:creategroupcrud', [
            'elements' => json_encode($elements), // Passa gli elementi come stringa JSON
            '--delete' => false, // Se vuoi utilizzare l'opzione delete, cambia in true
        ]);

        if ($request->ajax()) {
            return response()->json([
                'status' => 'success',
                'title' => 'Successo',
                'message' => 'Elemento creato con successo'
            ]);
        } else {
            return redirect('/')->with('message', 'Elemento creato con successo');
        }
    }
    
    public function deleteGroup(Request $request, $id)
    {
        $elements =[
            'id' => intval($id)
        ];

        Artisan::call('mifra:creategroupcrud', [
            'elements' => json_encode($elements), // Passa gli elementi come stringa JSON
            '--delete' => true, // Se vuoi utilizzare l'opzione delete, cambia in true
        ]);

        if ($request->ajax()) {
            return response()->json([
                'status' => 'success',
                'title' => 'Successo',
                'message' => 'Elemento eliminato con successo'
            ]);
        } else {
            return redirect('/')->with('message', 'Elemento eliminato con successo');
        }
    }
}
